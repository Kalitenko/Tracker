import CoreData

final class DataInitializer {
    
    // MARK: - Private Properties
    private let categoryStore: TrackerCategoryStore
    private let trackerStore: TrackerStore
    
    // MARK: - Initializers
    init(context: NSManagedObjectContext) {
        self.categoryStore = TrackerCategoryStore(context: context)
        self.trackerStore = TrackerStore(context: context)
    }
    
    // MARK: - Public Methods
    func preloadDataIfNeeded() {
        do {
            let existing = try categoryStore.fetchAll()
            guard existing.isEmpty else {
                Logger.success("–ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            }
            
            let categories = [
                TrackerCategory(title: "–í–∞–∂–Ω–æ–µ", trackers: []),
                TrackerCategory(title: "–†–∞–±–æ—Ç–∞", trackers: []),
                TrackerCategory(title: "–ó–¥–æ—Ä–æ–≤—å–µ", trackers: []),
                TrackerCategory(title: "–•–æ–±–±–∏", trackers: [])
            ]
            
            for category in categories {
                try categoryStore.add(category)
            }
            
            Logger.success("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            
            let workTrackers = [
                Tracker(
                    id: 101,
                    name: "–£—Ç—Ä–µ–Ω–Ω—è—è –ø–ª–∞–Ω—ë—Ä–∫–∞",
                    color: .systemBlue,
                    emoji: "üìã",
                    schedule: [.monday, .wednesday, .friday]
                ),
                Tracker(
                    id: 102,
                    name: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã",
                    color: .systemTeal,
                    emoji: "üìß",
                    schedule: [.monday, .tuesday, .wednesday, .thursday, .friday]
                ),
                Tracker(
                    id: 103,
                    name: "–ö–æ–¥-—Ä–µ–≤—å—é",
                    color: .systemOrange,
                    emoji: "üíª",
                    schedule: [.monday, .thursday]
                )
            ]
            
            let healthTrackers = [
                Tracker(
                    id: 201,
                    name: "–£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞",
                    color: .systemGreen,
                    emoji: "üèÉ‚Äç‚ôÇÔ∏è",
                    schedule: [.monday, .wednesday, .friday, .sunday]
                ),
                Tracker(
                    id: 202,
                    name: "–ú–µ–¥–∏—Ç–∞—Ü–∏—è",
                    color: .systemPurple,
                    emoji: "üßò‚Äç‚ôÄÔ∏è",
                    schedule: [.wednesday, .sunday]
                )
            ]
            
            let hobbyTrackers = [
                Tracker(
                    id: 301,
                    name: "–ò–≥—Ä–∞—Ç—å –Ω–∞ –≥–∏—Ç–∞—Ä–µ",
                    color: .systemRed,
                    emoji: "üé∏",
                    schedule: [.sunday]
                )
            ]
            
            try addTrackers(workTrackers, toCategoryNamed: "–†–∞–±–æ—Ç–∞")
            try addTrackers(healthTrackers, toCategoryNamed: "–ó–¥–æ—Ä–æ–≤—å–µ")
            try addTrackers(hobbyTrackers, toCategoryNamed: "–•–æ–±–±–∏")
            
            Logger.success("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç—Ä–µ–∫–µ—Ä—ã")
            
        } catch {
            Logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: \(error)")
        }
    }
    
    // MARK: - Private Methods
    private func addTrackers(_ trackers: [Tracker], toCategoryNamed categoryName: String) throws {
        for tracker in trackers {
            try trackerStore.add(tracker, toCategoryNamed: categoryName)
        }
    }
}
